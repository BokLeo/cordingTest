"use strict";
/*
    "점프와 순간이동"
    - 한번에 k칸을 앞으로 점프	---------> 건전지 사용량 k
    - (현재까지 온거리) X 2 순간이동 ----> 건전지 사용량 0

    - 거리가 n만큼 떨어진 장소로 이동하려고 함
    - 건전지 사용량 최소

    - param : 이동하려는 거리 n
    - return : 사용해야하는 건전지 사용량의 최솟값

    - ex. 5거리 가려고함
        - 처음 위치 0 에서 5 칸을 앞으로 점프하면 바로 도착하지만, 건전지 사용량이 5 만큼 듭니다.
        - 처음 위치 0 에서 2 칸을 앞으로 점프한 다음 순간이동 하면 (현재까지 온 거리 : 2) x 2에 해당하는 위치로 이동할 수 있으므로 위치 4로 이동합니다. 이때 1 칸을 앞으로 점프하면 도착하므로 건전지 사용량이 3 만큼 듭니다.
        - 처음 위치 0 에서 1 칸을 앞으로 점프한 다음 순간이동 하면 (현재까지 온 거리 : 1) x 2에 해당하는 위치로 이동할 수 있으므로 위치 2로 이동됩니다. 이때 다시 순간이동 하면 (현재까지 온 거리 : 2) x 2 만큼 이동할 수 있으므로 위치 4로 이동합니다. 이때 1 칸을 앞으로 점프하면 도착하므로 건전지 사용량이 2 만큼 듭니다.

    [제한 사항]
    - 1 <= n <= 10억
    - 1 <= k

    [입출력 예]
        N	result
        5	2
        6	2
        5000	5
*/
function 점프와순간이동(n) {
    let result = 0;
    while (n > 0) {
        n % 2 === 0 ? (n = n / 2) : (result++, n--);
    }
    ;
    return result;
}
// 1 2 4 8 16 32 64
// 36
// 18 9 4(1) 2 (1)
// 36 > 18 > 9(1) > 4 > 2 > 1
// 1 +1 > (2) > (4)	> (8)	> (16) > (32) +4 > 36 ======> 5
// 2 > (4) > (8)	> (16) > (32) +4 =========> 6
// 3 > (6) > (12) > (24) > (48) XXX
// 4 > (8) > (16) > (32) +4 
// 1 + (2) + (4) + (8)	+ (16) + 1;
// 1 2 4 8 16 32 
// console.log(점프와순간이동(5)); // 2
// console.log(점프와순간이동(6)); //	2
// console.log(점프와순간이동(36)); //	2
console.log(점프와순간이동(5000)); //	5
//# sourceMappingURL=67%EC%A0%90%ED%94%84%EC%99%80%EC%88%9C%EA%B0%84%EC%9D%B4%EB%8F%99.js.map